import Cocoa
import Carbon

class KeyboardMute: NSObject, NSApplicationDelegate {
    var statusItem: NSStatusItem?
    var isMicrophoneMuted = false
    var eventHandler: EventHandlerRef?
    
    func applicationDidFinishLaunching(_ notification: Notification) {
        print("Starting KeyboardMute...")
        
        // –°–æ–∑–¥–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç —Å—Ç–∞—Ç—É—Å-–±–∞—Ä–∞
        createStatusItem()
        
        // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –≥–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏
        registerGlobalHotkey()
        
        // –°–∫—Ä—ã–≤–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏–∑ Dock
        NSApp.setActivationPolicy(.accessory)
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏–π
        setupEventHandling()
        
        print("KeyboardMute –∑–∞–ø—É—â–µ–Ω! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ Cmd+Shift+M –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞.")
    }
    
    func setupEventHandling() {
        // –°–æ–∑–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏–π –¥–ª—è –≥–æ—Ä—è—á–∏—Ö –∫–ª–∞–≤–∏—à
        let eventMask = (1 << kEventClassKeyboard) | (1 << kEventClassApplication)
        InstallEventHandler(
            GetApplicationEventTarget(),
            { (nextHandler, theEvent, userData) -> OSStatus in
                let app = Unmanaged<KeyboardMute>.fromOpaque(userData!).takeUnretainedValue()
                return app.handleHotKeyEvent(nextHandler, theEvent)
            },
            1,
            [EventTypeSpec(eventClass: OSType(kEventClassKeyboard), eventKind: OSType(kEventHotKeyPressed))],
            Unmanaged.passUnretained(self).toOpaque(),
            &eventHandler
        )
    }
    
    func handleHotKeyEvent(_ nextHandler: EventHandlerCallRef?, _ theEvent: EventRef?) -> OSStatus {
        var hotKeyID = EventHotKeyID()
        var result = GetEventParameter(
            theEvent!,
            OSType(kEventParamDirectObject),
            OSType(typeEventHotKeyID),
            nil,
            MemoryLayout<EventHotKeyID>.size,
            nil,
            &hotKeyID
        )
        
        if result == noErr && hotKeyID.signature == 0x4D555445 { // "MUTE"
            DispatchQueue.main.async {
                self.toggleMicrophone()
            }
        }
        
        return noErr
    }
    
    func createStatusItem() {
        statusItem = NSStatusBar.system.statusItem(withLength: NSStatusItem.variableLength)
        
        if let button = statusItem?.button {
            updateButtonIcon()
                button.action = #selector(toggleMicrophone)
                button.target = self
        }
        
        // –°–æ–∑–¥–∞–µ–º –º–µ–Ω—é
        let menu = createMenu()
        statusItem?.menu = menu
    }
    
    func createMenu() -> NSMenu {
        let menu = NSMenu()
        
        let toggleItem = NSMenuItem(title: "Toggle Microphone (Cmd+Shift+M)", action: #selector(toggleMicrophone), keyEquivalent: "")
        toggleItem.target = self
        menu.addItem(toggleItem)
        
        menu.addItem(NSMenuItem.separator())
        
        let quitItem = NSMenuItem(title: "Quit", action: #selector(quitApp), keyEquivalent: "q")
        quitItem.target = self
        menu.addItem(quitItem)
        
        return menu
    }
    
    func registerGlobalHotkey() {
        let keyCode: UInt32 = 46 // M key
        let modifiers: UInt32 = UInt32(cmdKey | shiftKey)
        
        let hotKeyID = EventHotKeyID(signature: 0x4D555445, id: 1) // "MUTE" as OSType
        
        let status = RegisterEventHotKey(
            keyCode,
            modifiers,
            hotKeyID,
            GetApplicationEventTarget(),
            0,
            &eventHandler
        )
        
        if status != noErr {
            print("Failed to register hotkey: \(status)")
        } else {
            print("Hotkey Cmd+Shift+M registered successfully")
        }
    }
    
    @objc func toggleMicrophone() {
        print("Toggling microphone...")
        
        isMicrophoneMuted.toggle()
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∏–∫–æ–Ω–∫—É
        updateButtonIcon()
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–ª–∞—à–∫—É
        showMicrophonePlate()
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        showNotification()
        
        print("Microphone toggled: \(isMicrophoneMuted ? "MUTED" : "ACTIVE")")
    }
    
    func updateButtonIcon() {
        if let button = statusItem?.button {
            if isMicrophoneMuted {
                button.image = NSImage(systemSymbolName: "mic.slash", accessibilityDescription: "Microphone Muted")
                button.toolTip = "Microphone Muted - Click to unmute"
            } else {
                button.image = NSImage(systemSymbolName: "mic", accessibilityDescription: "Microphone Active")
                button.toolTip = "Microphone Active - Click to mute"
            }
        }
    }
    
    func showMicrophonePlate() {
        // –ü–æ–¥—Ö–æ–¥ 2: NSPanel (—Ç–µ—Å—Ç–∏—Ä—É–µ–º)
        createPanelPlate()
        
        // –î—Ä—É–≥–∏–µ –ø–æ–¥—Ö–æ–¥—ã:
        // createVisualEffectPlate()  // –ü–æ–¥—Ö–æ–¥ 1: NSVisualEffectView - segmentation fault
        // createStatusBarPlate()     // –ü–æ–¥—Ö–æ–¥ 4: NSStatusBar - –Ω–µ –≤–∏–¥–Ω–æ –ø–ª–∞—à–∫–∏
        // createCoreAnimationPlate() // –ü–æ–¥—Ö–æ–¥ 3: Core Animation - –º–æ–∂–µ—Ç –≤—ã–∑—ã–≤–∞—Ç—å –æ—à–∏–±–∫–∏
    }
    
    func createVisualEffectPlate() {
        guard let mainScreen = NSScreen.main else { return }
        
        // –°–æ–∑–¥–∞–µ–º –æ–∫–Ω–æ –ø–ª–∞—à–∫–∏
        let plateWindow = NSWindow(
            contentRect: NSRect(x: 0, y: 0, width: 100, height: 100),
            styleMask: [.borderless],
            backing: .buffered,
            defer: false
        )
        
        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–∫–Ω–æ –∫–∞–∫ —Å–∏—Å—Ç–µ–º–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        plateWindow.level = NSWindow.Level.floating
        plateWindow.backgroundColor = NSColor.clear
        plateWindow.isOpaque = false
        plateWindow.hasShadow = true
        plateWindow.ignoresMouseEvents = true
        plateWindow.collectionBehavior = [.canJoinAllSpaces, .stationary]
        plateWindow.animationBehavior = .utilityWindow
        
        // –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –Ω–∞ —ç–∫—Ä–∞–Ω–µ
        let screenFrame = mainScreen.visibleFrame
        let x = screenFrame.origin.x + (screenFrame.width - 100) / 2
        let y = screenFrame.origin.y + (screenFrame.height - 100) / 2
        plateWindow.setFrameOrigin(NSPoint(x: x, y: y))
        
        // –°–æ–∑–¥–∞–µ–º NSVisualEffectView –¥–ª—è —Ä–∞–∑–º—ã—Ç–æ–≥–æ —Ñ–æ–Ω–∞
        let visualEffectView = NSVisualEffectView(frame: plateWindow.contentView!.bounds)
        visualEffectView.material = .hudWindow
        visualEffectView.blendingMode = .behindWindow
        visualEffectView.state = .active
        visualEffectView.wantsLayer = true
        visualEffectView.layer?.cornerRadius = 20
        plateWindow.contentView = visualEffectView
        
        // –°–æ–∑–¥–∞–µ–º –∏–∫–æ–Ω–∫—É –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞
        let iconView = NSImageView(frame: NSRect(x: 20, y: 20, width: 60, height: 60))
        iconView.image = NSImage(systemSymbolName: isMicrophoneMuted ? "mic.slash" : "mic", accessibilityDescription: nil)
        iconView.image?.size = NSSize(width: 60, height: 60)
        iconView.contentTintColor = NSColor.labelColor
        visualEffectView.addSubview(iconView)
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–ª–∞—à–∫—É
        plateWindow.makeKeyAndOrderFront(nil)
        
        // –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è
        plateWindow.alphaValue = 0.0
        NSAnimationContext.runAnimationGroup({ context in
            context.duration = 0.15
            context.timingFunction = CAMediaTimingFunction(name: .easeOut)
            plateWindow.animator().alphaValue = 1.0
        })
        
        // –°–∫—Ä—ã–≤–∞–µ–º –ø–ª–∞—à–∫—É —á–µ—Ä–µ–∑ 1.2 —Å–µ–∫—É–Ω–¥—ã
        DispatchQueue.main.asyncAfter(deadline: .now() + 1.2) {
            NSAnimationContext.runAnimationGroup({ context in
                context.duration = 0.2
                context.timingFunction = CAMediaTimingFunction(name: .easeIn)
                plateWindow.animator().alphaValue = 0.0
            }) {
                plateWindow.close()
            }
        }
    }
    
    // –ü–æ–¥—Ö–æ–¥ 2: NSPanel
    func createPanelPlate() {
        guard let mainScreen = NSScreen.main else { return }
        
        print("üé§ Creating NSPanel plate: \(isMicrophoneMuted ? "MUTED" : "ACTIVE")")
        
        // –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π —Ä–∞—Å—á–µ—Ç —Ä–∞–∑–º–µ—Ä–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∞
        let screenWidth = mainScreen.frame.width
        let screenHeight = mainScreen.frame.height
        let minDimension = min(screenWidth, screenHeight)
        
        // –ü–ª–∞—à–∫–∞ —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç 15% –æ—Ç –º–µ–Ω—å—à–µ–π —Å—Ç–æ—Ä–æ–Ω—ã —ç–∫—Ä–∞–Ω–∞
        let plateSize = minDimension * 0.15
        let plateWidth = plateSize
        let plateHeight = plateSize
        
        // –ò–∫–æ–Ω–∫–∞ —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç 60% –æ—Ç —Ä–∞–∑–º–µ—Ä–∞ –ø–ª–∞—à–∫–∏ (—É–º–µ–Ω—å—à–µ–Ω–∞ –≤ 1.5 —Ä–∞–∑–∞)
        let iconSize = plateSize * 0.6
        let iconWidth = iconSize
        let iconHeight = iconSize
        
        // –û—Ç—Å—Ç—É–ø—ã —Å–æ—Å—Ç–∞–≤–ª—è—é—Ç 5% –æ—Ç —Ä–∞–∑–º–µ—Ä–∞ –ø–ª–∞—à–∫–∏
        let margin = plateSize * 0.05
        
        print("üìê Screen: \(Int(screenWidth))x\(Int(screenHeight)), Plate: \(Int(plateSize))x\(Int(plateSize)), Icon: \(Int(iconSize))x\(Int(iconSize))")
        
        let panel = NSPanel(
            contentRect: NSRect(x: 0, y: 0, width: plateWidth, height: plateHeight),
            styleMask: [.borderless],
            backing: .buffered,
            defer: false
        )
        
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–∞–Ω–µ–ª–∏ –¥–ª—è —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –≤–∏–¥–∞
        panel.level = NSWindow.Level.floating
        panel.backgroundColor = NSColor.clear
        panel.isOpaque = false
        panel.hasShadow = false
        panel.ignoresMouseEvents = true
        panel.collectionBehavior = [.canJoinAllSpaces, .stationary]
        panel.animationBehavior = .utilityWindow
        panel.hidesOnDeactivate = false
        
        // –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –Ω–∞ —ç–∫—Ä–∞–Ω–µ
        let screenFrame = mainScreen.visibleFrame
        let x = screenFrame.origin.x + (screenFrame.width - plateWidth) / 2
        let y = screenFrame.origin.y + (screenFrame.height - plateHeight) / 2
        panel.setFrameOrigin(NSPoint(x: x, y: y))
        
        // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç —Ç–æ–ª—å–∫–æ —Å —Ä–∞–∑–º—ã—Ç—ã–º —Ñ–æ–Ω–æ–º (–±–µ–∑ —á–µ—Ä–Ω–æ–≥–æ —Ñ–æ–Ω–∞)
        let blurEffect = NSVisualEffectView(frame: panel.contentView!.bounds)
        blurEffect.material = .hudWindow
        blurEffect.blendingMode = .behindWindow
        blurEffect.state = .active
        blurEffect.wantsLayer = true
        blurEffect.layer?.cornerRadius = 30
        blurEffect.layer?.masksToBounds = true
        blurEffect.layer?.shouldRasterize = true
        blurEffect.layer?.rasterizationScale = NSScreen.main?.backingScaleFactor ?? 1.0
        
        panel.contentView = blurEffect
        
        // –°–æ–∑–¥–∞–µ–º —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –∏–∫–æ–Ω–∫–∏
        let iconContainerSize = min(iconWidth, iconHeight) // –ö–≤–∞–¥—Ä–∞—Ç–Ω—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        let iconX = (plateWidth - iconContainerSize) / 2
        let iconY = (plateHeight - iconContainerSize) / 2
        
        // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä-—Ä–æ–¥–∏—Ç–µ–ª—å —Å —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–º —Ä–∞–∑–º–µ—Ä–æ–º
        let iconContainer = NSView(frame: NSRect(x: iconX, y: iconY, width: iconContainerSize, height: iconContainerSize))
        iconContainer.wantsLayer = true
        iconContainer.layer?.backgroundColor = NSColor.clear.cgColor
        
        // –°–æ–∑–¥–∞–µ–º NSImageView –≤–Ω—É—Ç—Ä–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
        let iconView = NSImageView(frame: NSRect(x: 0, y: 0, width: iconContainerSize, height: iconContainerSize))
        iconView.imageScaling = .scaleProportionallyUpOrDown
        iconView.imageAlignment = .alignCenter
        
        // –°–æ–∑–¥–∞–µ–º –∏–∫–æ–Ω–∫—É —Å —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–º —Ä–∞–∑–º–µ—Ä–æ–º
        let micImage = NSImage(systemSymbolName: isMicrophoneMuted ? "mic.slash" : "mic", accessibilityDescription: nil)
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞–ø—Ä—è–º—É—é
        iconView.image = micImage
        iconView.contentTintColor = isMicrophoneMuted ? NSColor.systemRed : NSColor.systemGreen
        iconView.wantsLayer = true
        iconView.layer?.shouldRasterize = true
        iconView.layer?.rasterizationScale = NSScreen.main?.backingScaleFactor ?? 1.0
        
        // –î–æ–±–∞–≤–ª—è–µ–º iconView –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä, –∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –≤ blurEffect
        iconContainer.addSubview(iconView)
        blurEffect.addSubview(iconContainer)
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–∞–Ω–µ–ª—å
        panel.makeKeyAndOrderFront(nil)
        
        // –ü—Ä–æ—Å—Ç–æ–µ –ø–æ—è–≤–ª–µ–Ω–∏–µ –±–µ–∑ –∞–Ω–∏–º–∞—Ü–∏–∏
        panel.alphaValue = 1.0
        
        // –°–∫—Ä—ã–≤–∞–µ–º –ø–∞–Ω–µ–ª—å —á–µ—Ä–µ–∑ 1.5 —Å–µ–∫—É–Ω–¥—ã
        DispatchQueue.main.asyncAfter(deadline: .now() + 1.5) {
            panel.close()
            print("üé§ NSPanel plate closed")
        }
    }
    
    // –ü–æ–¥—Ö–æ–¥ 3: Core Animation
    func createCoreAnimationPlate() {
        guard let mainScreen = NSScreen.main else { return }
        
        let plateWindow = NSWindow(
            contentRect: NSRect(x: 0, y: 0, width: 100, height: 100),
                styleMask: [.borderless],
                backing: .buffered,
                defer: false
            )
            
        plateWindow.level = NSWindow.Level.floating
        plateWindow.backgroundColor = NSColor.clear
        plateWindow.isOpaque = false
        plateWindow.hasShadow = true
        plateWindow.ignoresMouseEvents = true
        
        // –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º
        let screenFrame = mainScreen.visibleFrame
        let x = screenFrame.origin.x + (screenFrame.width - 100) / 2
        let y = screenFrame.origin.y + (screenFrame.height - 100) / 2
        plateWindow.setFrameOrigin(NSPoint(x: x, y: y))
        
        // –ö–æ–Ω—Ç–µ–Ω—Ç —Å Core Animation
        let contentView = NSView(frame: plateWindow.contentView!.bounds)
        contentView.wantsLayer = true
        contentView.layer?.cornerRadius = 20
        contentView.layer?.backgroundColor = NSColor.black.withAlphaComponent(0.8).cgColor
        
        // –ê–Ω–∏–º–∞—Ü–∏—è –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è
        let scaleAnimation = CABasicAnimation(keyPath: "transform.scale")
        scaleAnimation.fromValue = 0.5
        scaleAnimation.toValue = 1.0
        scaleAnimation.duration = 0.2
        scaleAnimation.timingFunction = CAMediaTimingFunction(name: .easeOut)
        contentView.layer?.add(scaleAnimation, forKey: "scale")
        
        plateWindow.contentView = contentView
        
        // –ò–∫–æ–Ω–∫–∞
        let iconView = NSImageView(frame: NSRect(x: 20, y: 20, width: 60, height: 60))
        iconView.image = NSImage(systemSymbolName: isMicrophoneMuted ? "mic.slash" : "mic", accessibilityDescription: nil)
        iconView.image?.size = NSSize(width: 60, height: 60)
        iconView.contentTintColor = NSColor.white
        contentView.addSubview(iconView)
        
        plateWindow.makeKeyAndOrderFront(nil)
        
        DispatchQueue.main.asyncAfter(deadline: .now() + 1.2) {
            plateWindow.close()
        }
    }
    
    // –ü–æ–¥—Ö–æ–¥ 4: NSStatusBar –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    func createStatusBarPlate() {
        // –°–æ–∑–¥–∞–µ–º –∑–∞–º–µ—Ç–Ω—É—é –ø–ª–∞—à–∫—É –≤ —Å—Ç–∞—Ç—É—Å-–±–∞—Ä–µ
        if let button = statusItem?.button {
            let originalImage = button.image
            let originalTint = button.contentTintColor
            
            print("üé§ Creating plate: \(isMicrophoneMuted ? "MUTED" : "ACTIVE")")
            
            // –ë–æ–ª—å—à–∞—è –∏–∫–æ–Ω–∫–∞ —Å —è—Ä–∫–∏–º —Ü–≤–µ—Ç–æ–º
            let plateIcon = NSImage(systemSymbolName: isMicrophoneMuted ? "mic.slash" : "mic", accessibilityDescription: nil)
            plateIcon?.size = NSSize(width: 40, height: 40)
            button.image = plateIcon
            button.contentTintColor = isMicrophoneMuted ? NSColor.systemRed : NSColor.systemGreen
            
            // –ü—Ä–æ—Å—Ç–∞—è –∞–Ω–∏–º–∞—Ü–∏—è –ø—É–ª—å—Å–∞—Ü–∏–∏
            var pulseCount = 0
            let maxPulses = 6
            
            func pulse() {
                if pulseCount < maxPulses {
                    NSAnimationContext.runAnimationGroup({ context in
                        context.duration = 0.15
                        button.animator().alphaValue = 0.3
                    }) {
                        NSAnimationContext.runAnimationGroup({ context in
                            context.duration = 0.15
                            button.animator().alphaValue = 1.0
                        }) {
                            pulseCount += 1
                            DispatchQueue.main.asyncAfter(deadline: .now() + 0.1) {
                                pulse()
                            }
                        }
                    }
                } else {
                    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é –∏–∫–æ–Ω–∫—É
                    button.image = originalImage
                    button.contentTintColor = originalTint
                    print("üé§ Plate animation completed")
                }
            }
            
            pulse()
        }
    }
    
    func showNotification() {
        let notification = NSUserNotification()
        notification.title = "KeyboardMute"
        notification.informativeText = isMicrophoneMuted ? "Microphone Muted" : "Microphone Active"
        notification.soundName = nil
        
        NSUserNotificationCenter.default.deliver(notification)
    }
    
    @objc func quitApp() {
        print("Quitting application...")
        
        // –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º —Ä–µ—Å—É—Ä—Å—ã
        if let eventHandler = eventHandler {
            UnregisterEventHotKey(eventHandler)
        }
        
        NSApplication.shared.terminate(nil)
    }
    
    deinit {
        if let eventHandler = eventHandler {
            UnregisterEventHotKey(eventHandler)
        }
    }
}

// –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
let app = NSApplication.shared
let delegate = KeyboardMute()
app.delegate = delegate
app.run()

