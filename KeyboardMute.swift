import Cocoa
import Carbon

class KeyboardMute: NSObject, NSApplicationDelegate {
    var statusItem: NSStatusItem?
    var isMicrophoneMuted = false
    var eventHandler: EventHandlerRef?
    
    func applicationDidFinishLaunching(_ notification: Notification) {
        print("Starting KeyboardMute...")
        
        // –°–æ–∑–¥–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç —Å—Ç–∞—Ç—É—Å-–±–∞—Ä–∞
        createStatusItem()
        
        // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –≥–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏
        registerGlobalHotkey()
        
        // –°–∫—Ä—ã–≤–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏–∑ Dock
        NSApp.setActivationPolicy(.accessory)
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏–π
        setupEventHandling()
        
        print("KeyboardMute –∑–∞–ø—É—â–µ–Ω! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ Shift+Cmd+Z –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞.")
    }
    
    
    func setupEventHandling() {
        // –°–æ–∑–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏–π –¥–ª—è –≥–æ—Ä—è—á–∏—Ö –∫–ª–∞–≤–∏—à
        _ = (1 << kEventClassKeyboard) | (1 << kEventClassApplication)
        InstallEventHandler(
            GetApplicationEventTarget(),
            { (nextHandler, theEvent, userData) -> OSStatus in
                let app = Unmanaged<KeyboardMute>.fromOpaque(userData!).takeUnretainedValue()
                return app.handleHotKeyEvent(nextHandler, theEvent)
            },
            1,
            [EventTypeSpec(eventClass: OSType(kEventClassKeyboard), eventKind: OSType(kEventHotKeyPressed))],
            Unmanaged.passUnretained(self).toOpaque(),
            &eventHandler
        )
    }
    
    func handleHotKeyEvent(_ nextHandler: EventHandlerCallRef?, _ theEvent: EventRef?) -> OSStatus {
        var hotKeyID = EventHotKeyID()
        let result = GetEventParameter(
            theEvent!,
            OSType(kEventParamDirectObject),
            OSType(typeEventHotKeyID),
            nil,
            MemoryLayout<EventHotKeyID>.size,
            nil,
            &hotKeyID
        )
        
        if result == noErr && hotKeyID.signature == 0x4D555445 { // "MUTE"
            DispatchQueue.main.async {
                self.toggleMicrophone()
            }
        }
        
        return noErr
    }
    
    func createStatusItem() {
        statusItem = NSStatusBar.system.statusItem(withLength: NSStatusItem.variableLength)
        
        if let button = statusItem?.button {
            updateButtonIcon()
                button.action = #selector(toggleMicrophone)
                button.target = self
        }
        
        // –°–æ–∑–¥–∞–µ–º –º–µ–Ω—é
        let menu = createMenu()
        statusItem?.menu = menu
    }
    
    func createMenu() -> NSMenu {
        let menu = NSMenu()
        
        let toggleItem = NSMenuItem(title: "Toggle Microphone (Cmd+Shift+M)", action: #selector(toggleMicrophone), keyEquivalent: "")
        toggleItem.target = self
        menu.addItem(toggleItem)
        
        menu.addItem(NSMenuItem.separator())
        
        let quitItem = NSMenuItem(title: "Quit", action: #selector(quitApp), keyEquivalent: "q")
        quitItem.target = self
        menu.addItem(quitItem)
        
        return menu
    }
    
    func registerGlobalHotkey() {
        let keyCode: UInt32 = 6 // Z key
        let modifiers: UInt32 = UInt32(cmdKey | shiftKey)
        
        let hotKeyID = EventHotKeyID(signature: 0x4D555445, id: 1) // "MUTE" as OSType
        
        let status = RegisterEventHotKey(
            keyCode,
            modifiers,
            hotKeyID,
            GetApplicationEventTarget(),
            0,
            &eventHandler
        )
        
        if status != noErr {
            print("Failed to register hotkey: \(status)")
        } else {
            print("Hotkey Cmd+Shift+M registered successfully")
        }
    }
    
    @objc func toggleMicrophone() {
        print("Toggling microphone...")
        
        isMicrophoneMuted.toggle()
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∏–∫–æ–Ω–∫—É
        updateButtonIcon()
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–ª–∞—à–∫—É
        showMicrophonePlate()
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        showNotification()
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏—à—É M –≤ –æ–∫–Ω–æ –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–∏ –¢–æ–ª–∫
        sendMToKtalkConference()
        
        print("Microphone toggled: \(isMicrophoneMuted ? "MUTED" : "ACTIVE")")
    }
    
    func updateButtonIcon() {
        if let button = statusItem?.button {
            // –í—Å–µ–≥–¥–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–∏–∫—Ä–æ—Ñ–æ–Ω –≤–∫–ª—é—á–µ–Ω, –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è
            button.image = NSImage(systemSymbolName: "mic", accessibilityDescription: "Microphone")
            button.toolTip = nil
        }
    }
    
    func showMicrophonePlate() {
        // –ü–æ–¥—Ö–æ–¥ 2: NSPanel (—Ç–µ—Å—Ç–∏—Ä—É–µ–º)
        createPanelPlate()
        
        // –î—Ä—É–≥–∏–µ –ø–æ–¥—Ö–æ–¥—ã:
        // createVisualEffectPlate()  // –ü–æ–¥—Ö–æ–¥ 1: NSVisualEffectView - segmentation fault
        // createStatusBarPlate()     // –ü–æ–¥—Ö–æ–¥ 4: NSStatusBar - –Ω–µ –≤–∏–¥–Ω–æ –ø–ª–∞—à–∫–∏
        // createCoreAnimationPlate() // –ü–æ–¥—Ö–æ–¥ 3: Core Animation - –º–æ–∂–µ—Ç –≤—ã–∑—ã–≤–∞—Ç—å –æ—à–∏–±–∫–∏
    }
    
    func createVisualEffectPlate() {
        guard let mainScreen = NSScreen.main else { return }
        
        // –°–æ–∑–¥–∞–µ–º –æ–∫–Ω–æ –ø–ª–∞—à–∫–∏
        let plateWindow = NSWindow(
            contentRect: NSRect(x: 0, y: 0, width: 100, height: 100),
            styleMask: [.borderless],
            backing: .buffered,
            defer: false
        )
        
        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–∫–Ω–æ –∫–∞–∫ —Å–∏—Å—Ç–µ–º–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        plateWindow.level = NSWindow.Level.floating
        plateWindow.backgroundColor = NSColor.clear
        plateWindow.isOpaque = false
        plateWindow.hasShadow = true
        plateWindow.ignoresMouseEvents = true
        plateWindow.collectionBehavior = [.canJoinAllSpaces, .stationary]
        plateWindow.animationBehavior = .utilityWindow
        
        // –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –Ω–∞ —ç–∫—Ä–∞–Ω–µ
        let screenFrame = mainScreen.visibleFrame
        let x = screenFrame.origin.x + (screenFrame.width - 100) / 2
        let y = screenFrame.origin.y + (screenFrame.height - 100) / 2
        plateWindow.setFrameOrigin(NSPoint(x: x, y: y))
        
        // –°–æ–∑–¥–∞–µ–º NSVisualEffectView –¥–ª—è —Ä–∞–∑–º—ã—Ç–æ–≥–æ —Ñ–æ–Ω–∞
        let visualEffectView = NSVisualEffectView(frame: plateWindow.contentView!.bounds)
        visualEffectView.material = .hudWindow
        visualEffectView.blendingMode = .behindWindow
        visualEffectView.state = .active
        visualEffectView.wantsLayer = true
        visualEffectView.layer?.cornerRadius = 20
        plateWindow.contentView = visualEffectView
        
        // –°–æ–∑–¥–∞–µ–º –∏–∫–æ–Ω–∫—É –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞
        let iconView = NSImageView(frame: NSRect(x: 20, y: 20, width: 60, height: 60))
        iconView.image = NSImage(systemSymbolName: isMicrophoneMuted ? "mic.slash" : "mic", accessibilityDescription: nil)
        iconView.image?.size = NSSize(width: 60, height: 60)
        iconView.contentTintColor = NSColor.labelColor
        visualEffectView.addSubview(iconView)
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–ª–∞—à–∫—É
        plateWindow.makeKeyAndOrderFront(nil)
        
        // –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è
        plateWindow.alphaValue = 0.0
        NSAnimationContext.runAnimationGroup({ context in
            context.duration = 0.15
            context.timingFunction = CAMediaTimingFunction(name: .easeOut)
            plateWindow.animator().alphaValue = 1.0
        })
        
        // –°–∫—Ä—ã–≤–∞–µ–º –ø–ª–∞—à–∫—É —á–µ—Ä–µ–∑ 1.2 —Å–µ–∫—É–Ω–¥—ã
        DispatchQueue.main.asyncAfter(deadline: .now() + 1.2) {
            NSAnimationContext.runAnimationGroup({ context in
                context.duration = 0.2
                context.timingFunction = CAMediaTimingFunction(name: .easeIn)
                plateWindow.animator().alphaValue = 0.0
            }) {
                plateWindow.close()
            }
        }
    }
    
    // –ü–æ–¥—Ö–æ–¥ 2: NSPanel
    func createPanelPlate() {
        guard let mainScreen = NSScreen.main else { return }
        
        print("üé§ Creating NSPanel plate: \(isMicrophoneMuted ? "MUTED" : "ACTIVE")")
        
        // –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π —Ä–∞—Å—á–µ—Ç —Ä–∞–∑–º–µ—Ä–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∞
        let screenWidth = mainScreen.frame.width
        let screenHeight = mainScreen.frame.height
        let minDimension = min(screenWidth, screenHeight)
        
        // –ü–ª–∞—à–∫–∞ —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç 15% –æ—Ç –º–µ–Ω—å—à–µ–π —Å—Ç–æ—Ä–æ–Ω—ã —ç–∫—Ä–∞–Ω–∞
        let plateSize = minDimension * 0.15
        let plateWidth = plateSize
        let plateHeight = plateSize
        
        // –ò–∫–æ–Ω–∫–∞ —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç 60% –æ—Ç —Ä–∞–∑–º–µ—Ä–∞ –ø–ª–∞—à–∫–∏ (—É–º–µ–Ω—å—à–µ–Ω–∞ –≤ 1.5 —Ä–∞–∑–∞)
        let iconSize = plateSize * 0.6
        let iconWidth = iconSize
        let iconHeight = iconSize
        
        // –û—Ç—Å—Ç—É–ø—ã —Å–æ—Å—Ç–∞–≤–ª—è—é—Ç 5% –æ—Ç —Ä–∞–∑–º–µ—Ä–∞ –ø–ª–∞—à–∫–∏
        _ = plateSize * 0.05
        
        print("üìê Screen: \(Int(screenWidth))x\(Int(screenHeight)), Plate: \(Int(plateSize))x\(Int(plateSize)), Icon: \(Int(iconSize))x\(Int(iconSize))")
        
        let panel = NSPanel(
            contentRect: NSRect(x: 0, y: 0, width: plateWidth, height: plateHeight),
            styleMask: [.borderless],
            backing: .buffered,
            defer: false
        )
        
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–∞–Ω–µ–ª–∏ –¥–ª—è —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –≤–∏–¥–∞
        panel.level = NSWindow.Level.floating
        panel.backgroundColor = NSColor.clear
        panel.isOpaque = false
        panel.hasShadow = false
        panel.ignoresMouseEvents = true
        panel.collectionBehavior = [.canJoinAllSpaces, .stationary]
        panel.animationBehavior = .utilityWindow
        panel.hidesOnDeactivate = false
        
        // –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –Ω–∞ —ç–∫—Ä–∞–Ω–µ
        let screenFrame = mainScreen.visibleFrame
        let x = screenFrame.origin.x + (screenFrame.width - plateWidth) / 2
        let y = screenFrame.origin.y + (screenFrame.height - plateHeight) / 2
        panel.setFrameOrigin(NSPoint(x: x, y: y))
        
        // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç —Ç–æ–ª—å–∫–æ —Å —Ä–∞–∑–º—ã—Ç—ã–º —Ñ–æ–Ω–æ–º (–±–µ–∑ —á–µ—Ä–Ω–æ–≥–æ —Ñ–æ–Ω–∞)
        let blurEffect = NSVisualEffectView(frame: panel.contentView!.bounds)
        blurEffect.material = .hudWindow
        blurEffect.blendingMode = .behindWindow
        blurEffect.state = .active
        blurEffect.wantsLayer = true
        blurEffect.layer?.cornerRadius = 30
        blurEffect.layer?.masksToBounds = true
        blurEffect.layer?.shouldRasterize = true
        blurEffect.layer?.rasterizationScale = NSScreen.main?.backingScaleFactor ?? 1.0
        
        panel.contentView = blurEffect
        
        // –°–æ–∑–¥–∞–µ–º —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –∏–∫–æ–Ω–∫–∏
        let iconContainerSize = min(iconWidth, iconHeight) // –ö–≤–∞–¥—Ä–∞—Ç–Ω—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        let iconX = (plateWidth - iconContainerSize) / 2
        let iconY = (plateHeight - iconContainerSize) / 2
        
        // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä-—Ä–æ–¥–∏—Ç–µ–ª—å —Å —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–º —Ä–∞–∑–º–µ—Ä–æ–º
        let iconContainer = NSView(frame: NSRect(x: iconX, y: iconY, width: iconContainerSize, height: iconContainerSize))
        iconContainer.wantsLayer = true
        iconContainer.layer?.backgroundColor = NSColor.clear.cgColor
        
        // –°–æ–∑–¥–∞–µ–º NSImageView –≤–Ω—É—Ç—Ä–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
        let iconView = NSImageView(frame: NSRect(x: 0, y: 0, width: iconContainerSize, height: iconContainerSize))
        iconView.imageScaling = .scaleProportionallyUpOrDown
        iconView.imageAlignment = .alignCenter
        
        // –°–æ–∑–¥–∞–µ–º –∏–∫–æ–Ω–∫—É —Å —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–º —Ä–∞–∑–º–µ—Ä–æ–º (–≤—Å–µ–≥–¥–∞ –º–∏–∫—Ä–æ—Ñ–æ–Ω –≤–∫–ª—é—á–µ–Ω)
        let micImage = NSImage(systemSymbolName: "mic", accessibilityDescription: nil)
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞–ø—Ä—è–º—É—é
        iconView.image = micImage
        iconView.contentTintColor = NSColor.red
        iconView.wantsLayer = true
        iconView.layer?.shouldRasterize = true
        iconView.layer?.rasterizationScale = NSScreen.main?.backingScaleFactor ?? 1.0
        
        // –î–æ–±–∞–≤–ª—è–µ–º iconView –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä, –∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –≤ blurEffect
        iconContainer.addSubview(iconView)
        blurEffect.addSubview(iconContainer)
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–∞–Ω–µ–ª—å
        panel.makeKeyAndOrderFront(nil)
        
        // –ü—Ä–æ—Å—Ç–æ–µ –ø–æ—è–≤–ª–µ–Ω–∏–µ –±–µ–∑ –∞–Ω–∏–º–∞—Ü–∏–∏
        panel.alphaValue = 1.0
        
        // –°–∫—Ä—ã–≤–∞–µ–º –ø–∞–Ω–µ–ª—å —á–µ—Ä–µ–∑ 1.5 —Å–µ–∫—É–Ω–¥—ã
        DispatchQueue.main.asyncAfter(deadline: .now() + 1.5) {
            panel.close()
            print("üé§ NSPanel plate closed")
        }
    }
    
    // –ü–æ–¥—Ö–æ–¥ 3: Core Animation
    func createCoreAnimationPlate() {
        guard let mainScreen = NSScreen.main else { return }
        
        let plateWindow = NSWindow(
            contentRect: NSRect(x: 0, y: 0, width: 100, height: 100),
                styleMask: [.borderless],
                backing: .buffered,
                defer: false
            )
            
        plateWindow.level = NSWindow.Level.floating
        plateWindow.backgroundColor = NSColor.clear
        plateWindow.isOpaque = false
        plateWindow.hasShadow = true
        plateWindow.ignoresMouseEvents = true
        
        // –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º
        let screenFrame = mainScreen.visibleFrame
        let x = screenFrame.origin.x + (screenFrame.width - 100) / 2
        let y = screenFrame.origin.y + (screenFrame.height - 100) / 2
        plateWindow.setFrameOrigin(NSPoint(x: x, y: y))
        
        // –ö–æ–Ω—Ç–µ–Ω—Ç —Å Core Animation
        let contentView = NSView(frame: plateWindow.contentView!.bounds)
        contentView.wantsLayer = true
        contentView.layer?.cornerRadius = 20
        contentView.layer?.backgroundColor = NSColor.black.withAlphaComponent(0.8).cgColor
        
        // –ê–Ω–∏–º–∞—Ü–∏—è –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è
        let scaleAnimation = CABasicAnimation(keyPath: "transform.scale")
        scaleAnimation.fromValue = 0.5
        scaleAnimation.toValue = 1.0
        scaleAnimation.duration = 0.2
        scaleAnimation.timingFunction = CAMediaTimingFunction(name: .easeOut)
        contentView.layer?.add(scaleAnimation, forKey: "scale")
        
        plateWindow.contentView = contentView
        
        // –ò–∫–æ–Ω–∫–∞
        let iconView = NSImageView(frame: NSRect(x: 20, y: 20, width: 60, height: 60))
        iconView.image = NSImage(systemSymbolName: isMicrophoneMuted ? "mic.slash" : "mic", accessibilityDescription: nil)
        iconView.image?.size = NSSize(width: 60, height: 60)
        iconView.contentTintColor = NSColor.white
        contentView.addSubview(iconView)
        
        plateWindow.makeKeyAndOrderFront(nil)
        
        DispatchQueue.main.asyncAfter(deadline: .now() + 1.2) {
            plateWindow.close()
        }
    }
    
    // –ü–æ–¥—Ö–æ–¥ 4: NSStatusBar –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    func createStatusBarPlate() {
        // –°–æ–∑–¥–∞–µ–º –∑–∞–º–µ—Ç–Ω—É—é –ø–ª–∞—à–∫—É –≤ —Å—Ç–∞—Ç—É—Å-–±–∞—Ä–µ
        if let button = statusItem?.button {
            let originalImage = button.image
            let originalTint = button.contentTintColor
            
            print("üé§ Creating plate: \(isMicrophoneMuted ? "MUTED" : "ACTIVE")")
            
            // –ë–æ–ª—å—à–∞—è –∏–∫–æ–Ω–∫–∞ —Å —è—Ä–∫–∏–º —Ü–≤–µ—Ç–æ–º
            let plateIcon = NSImage(systemSymbolName: isMicrophoneMuted ? "mic.slash" : "mic", accessibilityDescription: nil)
            plateIcon?.size = NSSize(width: 40, height: 40)
            button.image = plateIcon
            button.contentTintColor = isMicrophoneMuted ? NSColor.systemRed : NSColor.systemGreen
            
            // –ü—Ä–æ—Å—Ç–∞—è –∞–Ω–∏–º–∞—Ü–∏—è –ø—É–ª—å—Å–∞—Ü–∏–∏
            var pulseCount = 0
            let maxPulses = 6
            
            func pulse() {
                if pulseCount < maxPulses {
                    NSAnimationContext.runAnimationGroup({ context in
                        context.duration = 0.15
                        button.animator().alphaValue = 0.3
                    }) {
                        NSAnimationContext.runAnimationGroup({ context in
                            context.duration = 0.15
                            button.animator().alphaValue = 1.0
                        }) {
                            pulseCount += 1
                            DispatchQueue.main.asyncAfter(deadline: .now() + 0.1) {
                                pulse()
                            }
                        }
                    }
                } else {
                    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é –∏–∫–æ–Ω–∫—É
                    button.image = originalImage
                    button.contentTintColor = originalTint
                    print("üé§ Plate animation completed")
                }
            }
            
            pulse()
        }
    }
    
    func showNotification() {
        let notification = NSUserNotification()
        notification.title = "KeyboardMute"
        notification.informativeText = isMicrophoneMuted ? "Microphone Muted" : "Microphone Active"
        notification.soundName = nil
        
        NSUserNotificationCenter.default.deliver(notification)
    }
    
    func sendMToKtalkConference() {
        print("üé§ –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–ª–∞–≤–∏—à–∏ M –≤ –æ–∫–Ω–æ –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–∏ –¢–æ–ª–∫...")
        
        // –ù–∞—Ö–æ–¥–∏–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¢–æ–ª–∫
        let runningApps = NSWorkspace.shared.runningApplications
        let ktalkApp = runningApps.first { app in
            let bundleId = app.bundleIdentifier ?? ""
            let appName = app.localizedName ?? ""
            return bundleId.lowercased().contains("ktalk") || 
                   bundleId.lowercased().contains("m-pm") ||
                   appName.lowercased().contains("—Ç–æ–ª–∫") || 
                   appName.lowercased().contains("ktalk")
        }
        
        guard let app = ktalkApp else {
            print("‚ùå –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¢–æ–ª–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            return
        }
        
        print("‚úÖ –ù–∞–π–¥–µ–Ω–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¢–æ–ª–∫: \(app.localizedName ?? "Unknown") (PID: \(app.processIdentifier))")
        
        // –ü–æ–ª—É—á–∞–µ–º –æ–∫–Ω–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        let appElement = AXUIElementCreateApplication(app.processIdentifier)
        var windowsRef: CFTypeRef?
        let windowsResult = AXUIElementCopyAttributeValue(appElement, kAXWindowsAttribute as CFString, &windowsRef)
        
        guard windowsResult == .success, let windows = windowsRef as? [AXUIElement] else {
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ–∫–Ω–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è")
            return
        }
        
        // –ò—â–µ–º –æ–∫–Ω–æ –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–∏ –ø–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã–º –ø—Ä–∏–∑–Ω–∞–∫–∞–º
        var conferenceWindow: AXUIElement?
        for window in windows {
            var titleRef: CFTypeRef?
            let titleResult = AXUIElementCopyAttributeValue(window, kAXTitleAttribute as CFString, &titleRef)
            let title = (titleResult == .success) ? (titleRef as? String ?? "") : ""
            
            print("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–∫–Ω–æ: \"\(title)\"")
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–Ω–æ–ø–æ–∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–µ–π
            if hasConferenceControlButtons(in: window) {
                conferenceWindow = window
                print("‚úÖ –ù–∞–π–¥–µ–Ω–æ –æ–∫–Ω–æ –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–∏ –ø–æ –∫–Ω–æ–ø–∫–∞–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è: \"\(title)\"")
                break
            }
        }
        
        guard let window = conferenceWindow else {
            print("‚ùå –û–∫–Ω–æ –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            return
        }
        
        // –ü–æ–¥–Ω–∏–º–∞–µ–º –æ–∫–Ω–æ –Ω–∞–≤–µ—Ä—Ö
        print("üîÑ –ü–æ–¥–Ω–∏–º–∞–µ–º –æ–∫–Ω–æ –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–∏ –Ω–∞–≤–µ—Ä—Ö...")
        AXUIElementSetAttributeValue(window, kAXFocusedAttribute as CFString, true as CFTypeRef)
        
        // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        app.activate(options: [])
        
        // –ñ–¥–µ–º –ø–æ–ª—Å–µ–∫—É–Ω–¥—ã
        print("‚è±Ô∏è –û–∂–∏–¥–∞–Ω–∏–µ 0.5 —Å–µ–∫—É–Ω–¥—ã...")
        usleep(500000) // 0.5 —Å–µ–∫—É–Ω–¥—ã
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏—à—É M
        print("‚å®Ô∏è –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–ª–∞–≤–∏—à–∏ M –≤ –¢–æ–ª–∫...")
        let keyDownEvent = CGEvent(keyboardEventSource: nil, virtualKey: 46, keyDown: true) // 46 = M key
        let keyUpEvent = CGEvent(keyboardEventSource: nil, virtualKey: 46, keyDown: false)
        
        guard let downEvent = keyDownEvent, let upEvent = keyUpEvent else {
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å–æ–±—ã—Ç–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã")
            return
        }
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ—Å—Ç–æ –∫–ª–∞–≤–∏—à—É M –±–µ–∑ –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–≤
        downEvent.flags = []
        upEvent.flags = []
        
        downEvent.post(tap: .cghidEventTap)
        usleep(100000) // 0.1 —Å–µ–∫—É–Ω–¥—ã –º–µ–∂–¥—É –Ω–∞–∂–∞—Ç–∏–µ–º –∏ –æ—Ç–ø—É—Å–∫–∞–Ω–∏–µ–º
        upEvent.post(tap: .cghidEventTap)
        
        print("‚úÖ –ö–ª–∞–≤–∏—à–∞ M –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ –æ–∫–Ω–æ –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–∏ –¢–æ–ª–∫")
    }
    
    func hasConferenceControlButtons(in window: AXUIElement) -> Bool {
        var microphoneButtonFound = false
        var cameraButtonFound = false
        var recordingButtonFound = false
        
        // –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –∏—â–µ–º –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–µ–π
        findConferenceButtons(in: window, microphoneFound: &microphoneButtonFound, cameraFound: &cameraButtonFound, recordingFound: &recordingButtonFound)
        
        // –û–∫–Ω–æ –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–∏ –¥–æ–ª–∂–Ω–æ –∏–º–µ—Ç—å –∫–Ω–æ–ø–∫–∏ –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞ –ò –∫–∞–º–µ—Ä—ã
        let isConferenceWindow = microphoneButtonFound && cameraButtonFound
        
        if isConferenceWindow {
            print("üéØ –ù–∞–π–¥–µ–Ω—ã –∫–Ω–æ–ø–∫–∏ –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–∏: –º–∏–∫—Ä–æ—Ñ–æ–Ω=\(microphoneButtonFound), –∫–∞–º–µ—Ä–∞=\(cameraButtonFound), –∑–∞–ø–∏—Å—å=\(recordingButtonFound)")
        }
        
        return isConferenceWindow
    }
    
    func findConferenceButtons(in element: AXUIElement, microphoneFound: inout Bool, cameraFound: inout Bool, recordingFound: inout Bool) {
        // –ü–æ–ª—É—á–∞–µ–º —Ä–æ–ª—å —ç–ª–µ–º–µ–Ω—Ç–∞
        var roleRef: CFTypeRef?
        let roleResult = AXUIElementCopyAttributeValue(element, kAXRoleAttribute as CFString, &roleRef)
        let role = (roleResult == .success) ? (roleRef as? String ?? "unknown") : "unknown"
        
        if role == "AXButton" {
            // –ü–æ–ª—É—á–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞
            var descriptionRef: CFTypeRef?
            let descResult = AXUIElementCopyAttributeValue(element, kAXDescriptionAttribute as CFString, &descriptionRef)
            let description = (descResult == .success) ? (descriptionRef as? String ?? "") : ""
            
            // –ü–æ–ª—É—á–∞–µ–º help (tooltip) —ç–ª–µ–º–µ–Ω—Ç–∞
            var helpRef: CFTypeRef?
            let helpResult = AXUIElementCopyAttributeValue(element, kAXHelpAttribute as CFString, &helpRef)
            let help = (helpResult == .success) ? (helpRef as? String ?? "") : ""
            
            // –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞
            var valueRef: CFTypeRef?
            let valueResult = AXUIElementCopyAttributeValue(element, kAXValueAttribute as CFString, &valueRef)
            let value = (valueResult == .success) ? (valueRef as? String ?? "") : ""
            
            let allText = "\(description) \(help) \(value)".lowercased()
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–µ–π
            if allText.contains("–º–∏–∫—Ä–æ—Ñ–æ–Ω") || allText.contains("microphone") || allText.contains("mute") || allText.contains("unmute") {
                microphoneFound = true
                print("üé§ –ù–∞–π–¥–µ–Ω–∞ –∫–Ω–æ–ø–∫–∞ –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞: '\(description)'")
            } else if allText.contains("–∫–∞–º–µ—Ä") || allText.contains("camera") || allText.contains("video") {
                cameraFound = true
                print("üìπ –ù–∞–π–¥–µ–Ω–∞ –∫–Ω–æ–ø–∫–∞ –∫–∞–º–µ—Ä—ã: '\(description)'")
            } else if allText.contains("–∑–∞–ø–∏—Å") || allText.contains("record") || allText.contains("recording") {
                recordingFound = true
                print("üéØ –ù–∞–π–¥–µ–Ω–∞ –∫–Ω–æ–ø–∫–∞ –∑–∞–ø–∏—Å–∏: '\(description)'")
            }
        }
        
        // –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –∏—â–µ–º –≤ –¥–æ—á–µ—Ä–Ω–∏—Ö —ç–ª–µ–º–µ–Ω—Ç–∞—Ö
        var childrenRef: CFTypeRef?
        let childrenResult = AXUIElementCopyAttributeValue(element, kAXChildrenAttribute as CFString, &childrenRef)
        
        if childrenResult == .success, let children = childrenRef as? [AXUIElement] {
            for child in children {
                findConferenceButtons(in: child, microphoneFound: &microphoneFound, cameraFound: &cameraFound, recordingFound: &recordingFound)
            }
        }
    }
    
    @objc func quitApp() {
        print("Quitting application...")
        
        // –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º —Ä–µ—Å—É—Ä—Å—ã
        if let eventHandler = eventHandler {
            UnregisterEventHotKey(eventHandler)
        }
        
        NSApplication.shared.terminate(nil)
    }
    
    deinit {
        if let eventHandler = eventHandler {
            UnregisterEventHotKey(eventHandler)
        }
    }
}

// –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
let app = NSApplication.shared
let delegate = KeyboardMute()
app.delegate = delegate
app.run()

