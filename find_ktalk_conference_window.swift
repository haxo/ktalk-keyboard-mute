#!/usr/bin/env swift

import Cocoa
import ApplicationServices

print("üîç –ü–æ–∏—Å–∫ –æ–∫–Ω–∞ –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–∏ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –¢–æ–ª–∫...")

// –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –ø—Ä–æ—Ü–µ—Å—Å—ã ktalk
let runningApps = NSWorkspace.shared.runningApplications
let ktalkApps = runningApps.filter { app in
    let bundleId = app.bundleIdentifier ?? ""
    let appName = app.localizedName ?? ""
    return bundleId.lowercased().contains("ktalk") || 
           bundleId.lowercased().contains("m-pm") ||
           appName.lowercased().contains("—Ç–æ–ª–∫") || 
           appName.lowercased().contains("ktalk")
}

if ktalkApps.isEmpty {
    print("‚ùå –ü—Ä–∏–ª–æ–∂–µ–Ω–∏—è –¢–æ–ª–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
    exit(1)
}

print("‚úÖ –ù–∞–π–¥–µ–Ω–æ \(ktalkApps.count) –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ(–π) –¢–æ–ª–∫:")

for (index, app) in ktalkApps.enumerated() {
    print("üì± \(index + 1). \(app.localizedName ?? "Unknown") (PID: \(app.processIdentifier))")
    
    // –ü–æ–ª—É—á–∞–µ–º –æ–∫–Ω–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    let appElement = AXUIElementCreateApplication(app.processIdentifier)
    var windowsRef: CFTypeRef?
    let windowsResult = AXUIElementCopyAttributeValue(appElement, kAXWindowsAttribute as CFString, &windowsRef)
    
    if windowsResult == .success, let windows = windowsRef as? [AXUIElement] {
        print("   ü™ü –ù–∞–π–¥–µ–Ω–æ \(windows.count) –æ–∫–æ–Ω:")
        
        for (windowIndex, window) in windows.enumerated() {
            // –ü–æ–ª—É—á–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –æ–∫–Ω–∞
            var titleRef: CFTypeRef?
            let titleResult = AXUIElementCopyAttributeValue(window, kAXTitleAttribute as CFString, &titleRef)
            let title = (titleResult == .success) ? (titleRef as? String ?? "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è") : "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"
            
            // –ü–æ–ª—É—á–∞–µ–º –ø–æ–∑–∏—Ü–∏—é –∏ —Ä–∞–∑–º–µ—Ä –æ–∫–Ω–∞
            var positionRef: CFTypeRef?
            var sizeRef: CFTypeRef?
            let posResult = AXUIElementCopyAttributeValue(window, kAXPositionAttribute as CFString, &positionRef)
            let sizeResult = AXUIElementCopyAttributeValue(window, kAXSizeAttribute as CFString, &sizeRef)
            
            var position = CGPoint(x: 0, y: 0)
            var size = CGSize(width: 0, height: 0)
            
            if posResult == .success, let posValue = positionRef {
                AXValueGetValue(posValue as! AXValue, .cgPoint, &position)
            }
            
            if sizeResult == .success, let sizeValue = sizeRef {
                AXValueGetValue(sizeValue as! AXValue, .cgSize, &size)
            }
            
            print("      \(windowIndex + 1). \"\(title)\"")
            print("         üìê –ü–æ–∑–∏—Ü–∏—è: (\(Int(position.x)), \(Int(position.y)))")
            print("         üìè –†–∞–∑–º–µ—Ä: \(Int(size.width))x\(Int(size.height))")
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –æ–∫–Ω–æ–º –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–∏
            let lowerTitle = title.lowercased()
            if lowerTitle.contains("–∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü") || 
               lowerTitle.contains("conference") || 
               lowerTitle.contains("–≤—Å—Ç—Ä–µ—á") || 
               lowerTitle.contains("meeting") ||
               lowerTitle.contains("–∑–≤–æ–Ω–æ–∫") ||
               lowerTitle.contains("call") {
                print("         üéØ *** –í–û–ó–ú–û–ñ–ù–û –û–ö–ù–û –ö–û–ù–§–ï–†–ï–ù–¶–ò–ò ***")
            }
            
            // –ò—â–µ–º –∫–Ω–æ–ø–∫–∏ –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞ –≤ –æ–∫–Ω–µ
            findMicrophoneButtons(in: window, windowTitle: title)
        }
    } else {
        print("   ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ–∫–Ω–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è")
    }
    print()
}

func findMicrophoneButtons(in window: AXUIElement, windowTitle: String) {
    print("         üîç –ü–æ–∏—Å–∫ –∫–Ω–æ–ø–æ–∫ –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞ –≤ –æ–∫–Ω–µ \"\(windowTitle)\"...")
    
    var childrenRef: CFTypeRef?
    let childrenResult = AXUIElementCopyAttributeValue(window, kAXChildrenAttribute as CFString, &childrenRef)
    
    if childrenResult == .success, let children = childrenRef as? [AXUIElement] {
        findMicrophoneButtonsRecursive(in: children, level: 0)
    }
}

func findMicrophoneButtonsRecursive(in elements: [AXUIElement], level: Int) {
    let indent = String(repeating: "  ", count: level + 3)
    
    for element in elements {
        // –ü–æ–ª—É—á–∞–µ–º —Ä–æ–ª—å —ç–ª–µ–º–µ–Ω—Ç–∞
        var roleRef: CFTypeRef?
        let roleResult = AXUIElementCopyAttributeValue(element, kAXRoleAttribute as CFString, &roleRef)
        let role = (roleResult == .success) ? (roleRef as? String ?? "unknown") : "unknown"
        
        // –ü–æ–ª—É—á–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —ç–ª–µ–º–µ–Ω—Ç–∞
        var titleRef: CFTypeRef?
        let titleResult = AXUIElementCopyAttributeValue(element, kAXTitleAttribute as CFString, &titleRef)
        let title = (titleResult == .success) ? (titleRef as? String ?? "") : ""
        
        // –ü–æ–ª—É—á–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞
        var descriptionRef: CFTypeRef?
        let descResult = AXUIElementCopyAttributeValue(element, kAXDescriptionAttribute as CFString, &descriptionRef)
        let description = (descResult == .success) ? (descriptionRef as? String ?? "") : ""
        
        // –ü–æ–ª—É—á–∞–µ–º help (tooltip) —ç–ª–µ–º–µ–Ω—Ç–∞
        var helpRef: CFTypeRef?
        let helpResult = AXUIElementCopyAttributeValue(element, kAXHelpAttribute as CFString, &helpRef)
        let help = (helpResult == .success) ? (helpRef as? String ?? "") : ""
        
        // –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞
        var valueRef: CFTypeRef?
        let valueResult = AXUIElementCopyAttributeValue(element, kAXValueAttribute as CFString, &valueRef)
        let value = (valueResult == .success) ? (valueRef as? String ?? "") : ""
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –∫–Ω–æ–ø–∫–æ–π –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞
        let allText = "\(title) \(description) \(help) \(value)".lowercased()
        if allText.contains("–º–∏–∫—Ä–æ—Ñ–æ–Ω") || 
           allText.contains("microphone") || 
           allText.contains("mute") || 
           allText.contains("unmute") ||
           allText.contains("–≤–∫–ª—é—á–∏—Ç—å") ||
           allText.contains("–≤—ã–∫–ª—é—á–∏—Ç—å") {
            
            print("\(indent)üé§ –ù–ê–ô–î–ï–ù–ê –ö–ù–û–ü–ö–ê –ú–ò–ö–†–û–§–û–ù–ê:")
            print("\(indent)   –†–æ–ª—å: \(role)")
            print("\(indent)   –ó–∞–≥–æ–ª–æ–≤–æ–∫: '\(title)'")
            print("\(indent)   –û–ø–∏—Å–∞–Ω–∏–µ: '\(description)'")
            print("\(indent)   Help: '\(help)'")
            print("\(indent)   –ó–Ω–∞—á–µ–Ω–∏–µ: '\(value)'")
            
            // –ü–æ–ª—É—á–∞–µ–º –ø–æ–∑–∏—Ü–∏—é –∏ —Ä–∞–∑–º–µ—Ä –∫–Ω–æ–ø–∫–∏
            var positionRef: CFTypeRef?
            var sizeRef: CFTypeRef?
            let posResult = AXUIElementCopyAttributeValue(element, kAXPositionAttribute as CFString, &positionRef)
            let sizeResult = AXUIElementCopyAttributeValue(element, kAXSizeAttribute as CFString, &sizeRef)
            
            if posResult == .success, let posValue = positionRef {
                var position = CGPoint(x: 0, y: 0)
                AXValueGetValue(posValue as! AXValue, .cgPoint, &position)
                print("\(indent)   üìê –ü–æ–∑–∏—Ü–∏—è: (\(Int(position.x)), \(Int(position.y)))")
            }
            
            if sizeResult == .success, let sizeValue = sizeRef {
                var size = CGSize(width: 0, height: 0)
                AXValueGetValue(sizeValue as! AXValue, .cgSize, &size)
                print("\(indent)   üìè –†–∞–∑–º–µ—Ä: \(Int(size.width))x\(Int(size.height))")
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–Ω–æ –ª–∏ –Ω–∞–∂–∞—Ç—å –Ω–∞ –∫–Ω–æ–ø–∫—É
            var actionsRef: CFArray?
            let actionsResult = AXUIElementCopyActionNames(element, &actionsRef)
            if actionsResult == .success, let actions = actionsRef as? [String] {
                print("\(indent)   ‚ö° –î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è: \(actions.joined(separator: ", "))")
            }
        }
        
        // –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –∏—â–µ–º –≤ –¥–æ—á–µ—Ä–Ω–∏—Ö —ç–ª–µ–º–µ–Ω—Ç–∞—Ö
        var childrenRef: CFTypeRef?
        let childrenResult = AXUIElementCopyAttributeValue(element, kAXChildrenAttribute as CFString, &childrenRef)
        
        if childrenResult == .success, let children = childrenRef as? [AXUIElement] {
            findMicrophoneButtonsRecursive(in: children, level: level + 1)
        }
    }
}

print("\n‚úÖ –ü–æ–∏—Å–∫ –∑–∞–≤–µ—Ä—à–µ–Ω!")
