#!/usr/bin/env swift

import Cocoa
import ApplicationServices

print("üîç –ê–Ω–∞–ª–∏–∑ –æ–∫–Ω–∞ –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–∏ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∏–∫–æ–Ω–æ–∫...")

// –ù–∞—Ö–æ–¥–∏–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¢–æ–ª–∫
let runningApps = NSWorkspace.shared.runningApplications
let ktalkApp = runningApps.first { app in
    let bundleId = app.bundleIdentifier ?? ""
    let appName = app.localizedName ?? ""
    return bundleId.lowercased().contains("ktalk") || 
           bundleId.lowercased().contains("m-pm") ||
           appName.lowercased().contains("—Ç–æ–ª–∫") || 
           appName.lowercased().contains("ktalk")
}

guard let app = ktalkApp else {
    print("‚ùå –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¢–æ–ª–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
    exit(1)
}

print("‚úÖ –ù–∞–π–¥–µ–Ω–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¢–æ–ª–∫: \(app.localizedName ?? "Unknown") (PID: \(app.processIdentifier))")

// –ü–æ–ª—É—á–∞–µ–º –æ–∫–Ω–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
let appElement = AXUIElementCreateApplication(app.processIdentifier)
var windowsRef: CFTypeRef?
let windowsResult = AXUIElementCopyAttributeValue(appElement, kAXWindowsAttribute as CFString, &windowsRef)

guard windowsResult == .success, let windows = windowsRef as? [AXUIElement] else {
    print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ–∫–Ω–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è")
    exit(1)
}

print("ü™ü –ù–∞–π–¥–µ–Ω–æ \(windows.count) –æ–∫–æ–Ω:")

for (windowIndex, window) in windows.enumerated() {
    // –ü–æ–ª—É—á–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –æ–∫–Ω–∞
    var titleRef: CFTypeRef?
    let titleResult = AXUIElementCopyAttributeValue(window, kAXTitleAttribute as CFString, &titleRef)
    let title = (titleResult == .success) ? (titleRef as? String ?? "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è") : "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"
    
    print("\nüì± –û–∫–Ω–æ \(windowIndex + 1): \"\(title)\"")
    
    // –ü–æ–ª—É—á–∞–µ–º –ø–æ–∑–∏—Ü–∏—é –∏ —Ä–∞–∑–º–µ—Ä –æ–∫–Ω–∞
    var positionRef: CFTypeRef?
    var sizeRef: CFTypeRef?
    let posResult = AXUIElementCopyAttributeValue(window, kAXPositionAttribute as CFString, &positionRef)
    let sizeResult = AXUIElementCopyAttributeValue(window, kAXSizeAttribute as CFString, &sizeRef)
    
    var position = CGPoint(x: 0, y: 0)
    var size = CGSize(width: 0, height: 0)
    
    if posResult == .success, let posValue = positionRef {
        AXValueGetValue(posValue as! AXValue, .cgPoint, &position)
    }
    
    if sizeResult == .success, let sizeValue = sizeRef {
        AXValueGetValue(sizeValue as! AXValue, .cgSize, &size)
    }
    
    print("   üìê –ü–æ–∑–∏—Ü–∏—è: (\(Int(position.x)), \(Int(position.y)))")
    print("   üìè –†–∞–∑–º–µ—Ä: \(Int(size.width))x\(Int(size.height))")
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –æ–∫–Ω–æ–º –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–∏
    let lowerTitle = title.lowercased()
    let isConferenceWindow = lowerTitle.contains("–∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü") || 
                            lowerTitle.contains("conference") || 
                            lowerTitle.contains("–≤—Å—Ç—Ä–µ—á") || 
                            lowerTitle.contains("meeting") ||
                            lowerTitle.contains("–∑–≤–æ–Ω–æ–∫") ||
                            lowerTitle.contains("call") ||
                            lowerTitle.contains("—Å–ø—Ä–∏–Ω—Ç")
    
    if isConferenceWindow {
        print("   üéØ *** –û–ö–ù–û –ö–û–ù–§–ï–†–ï–ù–¶–ò–ò ***")
    }
    
    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã –≤ –æ–∫–Ω–µ
    print("   üîç –ê–Ω–∞–ª–∏–∑ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ –æ–∫–Ω–µ...")
    analyzeWindowElements(in: window, level: 0, isConferenceWindow: isConferenceWindow)
}

func analyzeWindowElements(in window: AXUIElement, level: Int, isConferenceWindow: Bool) {
    let indent = String(repeating: "  ", count: level + 2)
    
    var childrenRef: CFTypeRef?
    let childrenResult = AXUIElementCopyAttributeValue(window, kAXChildrenAttribute as CFString, &childrenRef)
    
    if childrenResult == .success, let children = childrenRef as? [AXUIElement] {
        var buttonCount = 0
        var imageCount = 0
        var iconCount = 0
        var microphoneElements = 0
        var videoElements = 0
        var conferenceSpecificElements = 0
        
        for element in children {
            // –ü–æ–ª—É—á–∞–µ–º —Ä–æ–ª—å —ç–ª–µ–º–µ–Ω—Ç–∞
            var roleRef: CFTypeRef?
            let roleResult = AXUIElementCopyAttributeValue(element, kAXRoleAttribute as CFString, &roleRef)
            let role = (roleResult == .success) ? (roleRef as? String ?? "unknown") : "unknown"
            
            // –ü–æ–ª—É—á–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —ç–ª–µ–º–µ–Ω—Ç–∞
            var titleRef: CFTypeRef?
            let titleResult = AXUIElementCopyAttributeValue(element, kAXTitleAttribute as CFString, &titleRef)
            let title = (titleResult == .success) ? (titleRef as? String ?? "") : ""
            
            // –ü–æ–ª—É—á–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞
            var descriptionRef: CFTypeRef?
            let descResult = AXUIElementCopyAttributeValue(element, kAXDescriptionAttribute as CFString, &descriptionRef)
            let description = (descResult == .success) ? (descriptionRef as? String ?? "") : ""
            
            // –ü–æ–ª—É—á–∞–µ–º help (tooltip) —ç–ª–µ–º–µ–Ω—Ç–∞
            var helpRef: CFTypeRef?
            let helpResult = AXUIElementCopyAttributeValue(element, kAXHelpAttribute as CFString, &helpRef)
            let help = (helpResult == .success) ? (helpRef as? String ?? "") : ""
            
            // –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞
            var valueRef: CFTypeRef?
            let valueResult = AXUIElementCopyAttributeValue(element, kAXValueAttribute as CFString, &valueRef)
            let value = (valueResult == .success) ? (valueRef as? String ?? "") : ""
            
            // –ü–æ–ª—É—á–∞–µ–º –ø–æ–∑–∏—Ü–∏—é –∏ —Ä–∞–∑–º–µ—Ä —ç–ª–µ–º–µ–Ω—Ç–∞
            var positionRef: CFTypeRef?
            var sizeRef: CFTypeRef?
            let posResult = AXUIElementCopyAttributeValue(element, kAXPositionAttribute as CFString, &positionRef)
            let sizeResult = AXUIElementCopyAttributeValue(element, kAXSizeAttribute as CFString, &sizeRef)
            
            var position = CGPoint(x: 0, y: 0)
            var size = CGSize(width: 0, height: 0)
            
            if posResult == .success, let posValue = positionRef {
                AXValueGetValue(posValue as! AXValue, .cgPoint, &position)
            }
            
            if sizeResult == .success, let sizeValue = sizeRef {
                AXValueGetValue(sizeValue as! AXValue, .cgSize, &size)
            }
            
            // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–∏–ø —ç–ª–µ–º–µ–Ω—Ç–∞
            if role == "AXButton" {
                buttonCount += 1
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –¥–ª—è –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–∏ —ç–ª–µ–º–µ–Ω—Ç—ã
                let allText = "\(title) \(description) \(help) \(value)".lowercased()
                
                if allText.contains("–º–∏–∫—Ä–æ—Ñ–æ–Ω") || allText.contains("microphone") || allText.contains("mute") || allText.contains("unmute") {
                    microphoneElements += 1
                    print("\(indent)üé§ –ö–ù–û–ü–ö–ê –ú–ò–ö–†–û–§–û–ù–ê:")
                    print("\(indent)   –ó–∞–≥–æ–ª–æ–≤–æ–∫: '\(title)'")
                    print("\(indent)   –û–ø–∏—Å–∞–Ω–∏–µ: '\(description)'")
                    print("\(indent)   Help: '\(help)'")
                    print("\(indent)   –ü–æ–∑–∏—Ü–∏—è: (\(Int(position.x)), \(Int(position.y)))")
                    print("\(indent)   –†–∞–∑–º–µ—Ä: \(Int(size.width))x\(Int(size.height))")
                } else if allText.contains("–∫–∞–º–µ—Ä") || allText.contains("camera") || allText.contains("video") {
                    videoElements += 1
                    print("\(indent)üìπ –ö–ù–û–ü–ö–ê –ö–ê–ú–ï–†–´:")
                    print("\(indent)   –ó–∞–≥–æ–ª–æ–≤–æ–∫: '\(title)'")
                    print("\(indent)   –û–ø–∏—Å–∞–Ω–∏–µ: '\(description)'")
                    print("\(indent)   Help: '\(help)'")
                    print("\(indent)   –ü–æ–∑–∏—Ü–∏—è: (\(Int(position.x)), \(Int(position.y)))")
                    print("\(indent)   –†–∞–∑–º–µ—Ä: \(Int(size.width))x\(Int(size.height))")
                } else if allText.contains("–ø–æ–¥–µ–ª–∏—Ç—å—Å—è") || allText.contains("share") || 
                         allText.contains("—É—á–∞—Å—Ç–Ω–∏–∫") || allText.contains("participant") ||
                         allText.contains("—á–∞—Ç") || allText.contains("chat") ||
                         allText.contains("–Ω–∞—Å—Ç—Ä–æ–π–∫") || allText.contains("setting") ||
                         allText.contains("–∑–∞–≤–µ—Ä—à–∏—Ç—å") || allText.contains("end") ||
                         allText.contains("–≤—ã–π—Ç–∏") || allText.contains("leave") {
                    conferenceSpecificElements += 1
                    print("\(indent)üéØ –ö–ù–û–ü–ö–ê –ö–û–ù–§–ï–†–ï–ù–¶–ò–ò:")
                    print("\(indent)   –ó–∞–≥–æ–ª–æ–≤–æ–∫: '\(title)'")
                    print("\(indent)   –û–ø–∏—Å–∞–Ω–∏–µ: '\(description)'")
                    print("\(indent)   Help: '\(help)'")
                    print("\(indent)   –ü–æ–∑–∏—Ü–∏—è: (\(Int(position.x)), \(Int(position.y)))")
                    print("\(indent)   –†–∞–∑–º–µ—Ä: \(Int(size.width))x\(Int(size.height))")
                }
            } else if role == "AXImage" {
                imageCount += 1
                print("\(indent)üñºÔ∏è –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–ï:")
                print("\(indent)   –ó–∞–≥–æ–ª–æ–≤–æ–∫: '\(title)'")
                print("\(indent)   –û–ø–∏—Å–∞–Ω–∏–µ: '\(description)'")
                print("\(indent)   –ü–æ–∑–∏—Ü–∏—è: (\(Int(position.x)), \(Int(position.y)))")
                print("\(indent)   –†–∞–∑–º–µ—Ä: \(Int(size.width))x\(Int(size.height))")
            } else if role == "AXStaticText" && !title.isEmpty {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –¥–ª—è –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–∏ —Å–ª–æ–≤–∞
                let lowerText = title.lowercased()
                if lowerText.contains("—É—á–∞—Å—Ç–Ω–∏–∫") || lowerText.contains("participant") ||
                   lowerText.contains("–≤—Ä–µ–º—è") || lowerText.contains("time") ||
                   lowerText.contains("–∑–≤–æ–Ω–æ–∫") || lowerText.contains("call") ||
                   lowerText.contains("–≤—Å—Ç—Ä–µ—á") || lowerText.contains("meeting") {
                    conferenceSpecificElements += 1
                    print("\(indent)üìù –¢–ï–ö–°–¢ –ö–û–ù–§–ï–†–ï–ù–¶–ò–ò:")
                    print("\(indent)   –¢–µ–∫—Å—Ç: '\(title)'")
                    print("\(indent)   –ü–æ–∑–∏—Ü–∏—è: (\(Int(position.x)), \(Int(position.y)))")
                    print("\(indent)   –†–∞–∑–º–µ—Ä: \(Int(size.width))x\(Int(size.height))")
                }
            }
            
            // –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–æ—á–µ—Ä–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã
            analyzeWindowElements(in: element, level: level + 1, isConferenceWindow: isConferenceWindow)
        }
        
        // –í—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –æ–∫–Ω–∞
        print("\(indent)üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –û–ö–ù–ê:")
        print("\(indent)   –ö–Ω–æ–ø–∫–∏: \(buttonCount)")
        print("\(indent)   –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: \(imageCount)")
        print("\(indent)   –≠–ª–µ–º–µ–Ω—Ç—ã –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞: \(microphoneElements)")
        print("\(indent)   –≠–ª–µ–º–µ–Ω—Ç—ã –∫–∞–º–µ—Ä—ã: \(videoElements)")
        print("\(indent)   –≠–ª–µ–º–µ–Ω—Ç—ã –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–∏: \(conferenceSpecificElements)")
        
        if isConferenceWindow {
            print("\(indent)üéØ –£–ù–ò–ö–ê–õ–¨–ù–´–ï –ü–†–ò–ó–ù–ê–ö–ò –û–ö–ù–ê –ö–û–ù–§–ï–†–ï–ù–¶–ò–ò:")
            print("\(indent)   - –ù–∞–ª–∏—á–∏–µ –∫–Ω–æ–ø–æ–∫ –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞: \(microphoneElements > 0 ? "‚úÖ" : "‚ùå")")
            print("\(indent)   - –ù–∞–ª–∏—á–∏–µ –∫–Ω–æ–ø–æ–∫ –∫–∞–º–µ—Ä—ã: \(videoElements > 0 ? "‚úÖ" : "‚ùå")")
            print("\(indent)   - –°–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–∏: \(conferenceSpecificElements)")
            print("\(indent)   - –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–Ω–æ–ø–æ–∫: \(buttonCount)")
        }
    }
}

print("\n‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω!")
